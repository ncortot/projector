/* 
 * 8-high FONT FOR RENDERING TO THE LED SCREEN.
 * Includes kerning support
 * by Kevin Verelst based on 7x5 by David Soyez, 2013
 */

#ifndef __FONT8X6_H
#define __FONT8X6_H

#include <avr/pgmspace.h>

#define FONT_8X6_HEIGHT  8

#define FONT_8X6_STEP_GLYPH 12
// Number of bytes per glyph 

prog_char FONT_8X6 [] PROGMEM = {
  0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000,  // SPACE
  0b0000, 0b0000, 0b1111, 0b1101, 0b1111, 0b1101, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000,  // !
  0b1011, 0b0000, 0b0111, 0b0000, 0b0000, 0b0000, 0b1011, 0b0000, 0b0111, 0b0000, 0b0000, 0b0000,  // "
  0b0100, 0b0001, 0b1111, 0b0111, 0b0100, 0b0001, 0b1111, 0b0111, 0b0100, 0b0001, 0b0000, 0b0000,  // #
  0b0100, 0b0010, 0b1010, 0b0010, 0b1111, 0b0111, 0b1010, 0b0010, 0b0010, 0b0001, 0b0000, 0b0000,  // $
  0b0011, 0b0010, 0b0011, 0b0001, 0b1000, 0b0000, 0b0100, 0b0110, 0b0010, 0b0110, 0b0000, 0b0000,  // %
  0b0110, 0b0011, 0b1001, 0b0100, 0b0101, 0b0101, 0b0010, 0b0010, 0b0000, 0b0101, 0b0000, 0b0000,  // &
  0b1011, 0b0000, 0b0111, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000,  // '
  
  0b1100, 0b0011, 0b1110, 0b0111, 0b0011, 0b1100, 0b0001, 0b1000, 0b0000, 0b0000, 0b0000, 0b0000,  // (
  0b0001, 0b1000, 0b0011, 0b1100, 0b1110, 0b0111, 0b1100, 0b0011, 0b0000, 0b0000, 0b0000, 0b0000,  // )
  0b0100, 0b0001, 0b1000, 0b0000, 0b1110, 0b0011, 0b1000, 0b0000, 0b0100, 0b0001, 0b0000, 0b0000,  // *
  0b1000, 0b0001, 0b1000, 0b0001, 0b1110, 0b0111, 0b1110, 0b0111, 0b1000, 0b0001, 0b1000, 0b0001,  // +
  0b1000, 0b0101, 0b1000, 0b0011, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000,  // ,
  0b1000, 0b0001, 0b1000, 0b0001, 0b1000, 0b0001, 0b1000, 0b0001, 0b1000, 0b0001, 0b1000, 0b0001,  // -
  0b0000, 0b0110, 0b0000, 0b0110, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000,  // .
  0b0000, 0b0110, 0b0000, 0b0011, 0b1000, 0b0001, 0b1100, 0b0000, 0b0110, 0b0000, 0b0011, 0b0000,  // /
  
  0b1110, 0b0111, 0b1111, 0b1111, 0b0011, 0b1101, 0b1011, 0b1100, 0b1111, 0b1111, 0b1110, 0b0111,  // 0
  0b0100, 0b0000, 0b0110, 0b0000, 0b1111, 0b1111, 0b1111, 0b1111, 0b0000, 0b0000, 0b0000, 0b0000,  // 1
  0b0110, 0b1100, 0b0111, 0b1110, 0b0011, 0b1111, 0b1011, 0b1101, 0b1111, 0b1100, 0b0110, 0b1100,  // 2
  0b0110, 0b0110, 0b0111, 0b1110, 0b0011, 0b1100, 0b1011, 0b1101, 0b1111, 0b1111, 0b0110, 0b0111,  // 3
  0b1000, 0b0011, 0b1100, 0b0011, 0b0110, 0b0011, 0b1111, 0b1111, 0b1111, 0b1111, 0b0000, 0b0011,  // 4
  0b1111, 0b0110, 0b1111, 0b1110, 0b1011, 0b1100, 0b1011, 0b1101, 0b1011, 0b1111, 0b0011, 0b0111,  // 5
  0b1100, 0b0111, 0b1110, 0b1111, 0b1011, 0b1100, 0b1011, 0b1100, 0b1011, 0b1111, 0b0000, 0b0111,  // 6
  0b0011, 0b0000, 0b0011, 0b0000, 0b0011, 0b1111, 0b1011, 0b1111, 0b1111, 0b0000, 0b0111, 0b0000,  // 7
  
  0b0110, 0b0111, 0b1111, 0b1111, 0b1011, 0b1100, 0b1011, 0b1100, 0b1111, 0b1111, 0b0110, 0b0111,  // 8
  0b1110, 0b0000, 0b1111, 0b1101, 0b1011, 0b1101, 0b1011, 0b1101, 0b1111, 0b1111, 0b1110, 0b0111,  // 9
  0b0110, 0b0011, 0b0110, 0b0011, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, // :
  0b0110, 0b1011, 0b0110, 0b0111, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, // ;
  0b1000, 0b0001, 0b1100, 0b0011, 0b0110, 0b0110, 0b0011, 0b1100, 0b0001, 0b1000, 0b0000, 0b0000, // <
  0b0110, 0b0011, 0b0110, 0b0011, 0b0110, 0b0011, 0b0110, 0b0011, 0b0110, 0b0011, 0b0110, 0b0011, // =
  0b0001, 0b1000, 0b0011, 0b1100, 0b0110, 0b0110, 0b1100, 0b0011, 0b1000, 0b0001, 0b0000, 0b0000, // >
  0b0110, 0b0000, 0b0111, 0b0000, 0b0011, 0b1011, 0b1011, 0b1011, 0b1111, 0b0000, 0b0110, 0b0000, // ?
  
  0b1110, 0b0011, 0b0001, 0b0100, 0b1101, 0b0101, 0b0101, 0b0101, 0b1110, 0b0010, 0b0000, 0b0000, // @
  0b1110, 0b1111, 0b1111, 0b1111, 0b0011, 0b0011, 0b0011, 0b0011, 0b1111, 0b1111, 0b1110, 0b1111, // A
  0b1111, 0b1111, 0b1111, 0b1111, 0b1011, 0b1101, 0b1011, 0b1101, 0b1111, 0b1111, 0b0110, 0b0111, // B
  0b1110, 0b0111, 0b1111, 0b1111, 0b0011, 0b1100, 0b0011, 0b1100, 0b0111, 0b1110, 0b0110, 0b0110, // C
  0b1111, 0b1111, 0b1111, 0b1111, 0b0011, 0b1100, 0b0011, 0b1100, 0b1111, 0b1111, 0b1110, 0b0111, // D
  0b1111, 0b1111, 0b1111, 0b1111, 0b1011, 0b1101, 0b1011, 0b1101, 0b1011, 0b1101, 0b0011, 0b1100, // E
  0b1111, 0b1111, 0b1111, 0b1111, 0b1011, 0b0001, 0b1011, 0b0001, 0b1011, 0b0001, 0b0011, 0b0000, // F
  0b1110, 0b0111, 0b1111, 0b1111, 0b0011, 0b1100, 0b1011, 0b1101, 0b1011, 0b1111, 0b1010, 0b0111, // G
  
  0b1111, 0b1111, 0b1111, 0b1111, 0b1000, 0b0001, 0b1000, 0b0001, 0b1111, 0b1111, 0b1111, 0b1111, // H
  0b1111, 0b1111, 0b1111, 0b1111, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, 0b0000, // I
  0b0000, 0b0110, 0b0000, 0b1110, 0b0000, 0b1100, 0b1111, 0b1111, 0b1111, 0b0111, 0b0000, 0b0000, // J
  0b1111, 0b1111, 0b1111, 0b1111, 0b1000, 0b0001, 0b1100, 0b0011, 0b0111, 0b1110, 0b0011, 0b1100, // K
  0b1111, 0b1111, 0b1111, 0b1111, 0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b0000, // L
  0b1111, 0b1111, 0b1110, 0b1111, 0b1100, 0b0000, 0b1100, 0b0000, 0b1110, 0b1111, 0b1111, 0b1111, // M  
  0b1111, 0b1111, 0b1111, 0b1111, 0b0110, 0b0000, 0b1100, 0b0000, 0b1111, 0b1111, 0b1111, 0b1111, // N
  0b1110, 0b0111, 0b1111, 0b1111, 0b0011, 0b1100, 0b0011, 0b1100, 0b1111, 0b1111, 0b1110, 0b0111, // O
  
  0b1111, 0b1111, 0b1111, 0b1111, 0b0011, 0b0011, 0b0011, 0b0011, 0b1111, 0b0011, 0b1110, 0b0001, // P
  0b1110, 0b0111, 0b1111, 0b1111, 0b0011, 0b1100, 0b0011, 0b1110, 0b1111, 0b0111, 0b1110, 0b1011, // Q
  0b1111, 0b1111, 0b1111, 0b1111, 0b0011, 0b0011, 0b0011, 0b0011, 0b1111, 0b1111, 0b1110, 0b1110, // R
  0b1110, 0b1100, 0b1111, 0b1101, 0b1011, 0b1101, 0b1011, 0b1101, 0b1011, 0b1111, 0b0011, 0b0111, // S
  0b0011, 0b0000, 0b0011, 0b0000, 0b1111, 0b1111, 0b1111, 0b1111, 0b0011, 0b0000, 0b0011, 0b0000, // T  
  0b1111, 0b0111, 0b1111, 0b1111, 0b0000, 0b1100, 0b0000, 0b1100, 0b1111, 0b1111, 0b1111, 0b0111, // U
  0b1111, 0b0011, 0b1111, 0b0111, 0b0000, 0b1100, 0b0000, 0b1100, 0b1111, 0b0111, 0b1111, 0b0011, // V
  0b1111, 0b1111, 0b1111, 0b0111, 0b0000, 0b0011, 0b0000, 0b0011, 0b1111, 0b0111, 0b1111, 0b1111, // W
  
  0b0111, 0b1111, 0b0111, 0b1111, 0b1000, 0b0000, 0b1000, 0b0000, 0b0111, 0b1111, 0b0111, 0b1111, // X
  0b1111, 0b0000, 0b1111, 0b0001, 0b0000, 0b1111, 0b0000, 0b1111, 0b1111, 0b0001, 0b1111, 0b0000, // Y
  0b0011, 0b1110, 0b0011, 0b1111, 0b1011, 0b1101, 0b1111, 0b1100, 0b0111, 0b1100, 0b0011, 0b1100, // Z
  0b1111, 0b1111, 0b1111, 0b1111, 0b0011, 0b1100, 0b0011, 0b1100, 0b0000, 0b0000, 0b0000, 0b0000, // [
  0b0110, 0b0000, 0b1100, 0b0000, 0b1000, 0b0001, 0b0000, 0b0011, 0b0000, 0b0110, 0b0000, 0b1100, // backslash
  0b0011, 0b1100, 0b0011, 0b1100, 0b1111, 0b1111, 0b1111, 0b1111, 0b0000, 0b0000, 0b0000, 0b0000, // ]
  0b1100, 0b0000, 0b0110, 0b0000, 0b0011, 0b0000, 0b0110, 0b0000, 0b1100, 0b0000, 0b0000, 0b0000, // ^
  0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b1100, 0b0000, 0b0000  // _
};

char FONT_8X6_WIDTH [] = {
  2, 4, 5, 5, 5, 5, 5, 2,  // spc to '
  4, 4, 5, 6, 2, 6, 2, 6,  // ( to /
  6, 4, 6, 6, 6, 6, 6, 6,  // 0 to 7
  6, 6, 2, 2, 5, 6, 5, 6,  // 8 to ?
  5, 6, 6, 6, 6, 6, 6, 6,  // @ to G
  6, 2, 5, 6, 5, 6, 6, 6,  // H to O
  6, 6, 6, 6, 6, 6, 6, 6,  // P to W
  6, 6, 6, 4, 6, 4, 6, 5   // X to _
};

#endif  // __FONT8X6_H
